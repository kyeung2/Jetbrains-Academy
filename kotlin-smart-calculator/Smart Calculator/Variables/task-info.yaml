type: edu
custom_name: stage6
files:
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest {

        public Test() {
            super(MainKt.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return Arrays.asList(
                /* Check simple additions and subtractions */
                new SimpleTestCase(
                    "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit",
                    "2\n-5\n11\nBye!"
                ),
                /* Check handling unknown commands */
                new SimpleTestCase(
                    "/command\n/exit",
                    "Unknown command\nBye!"
                ),
                /* Check different assignments */
                new SimpleTestCase(
                    "n = 3\nm=4\na =   5\nb = a\nn\nm\na\nb\ncount = 10\ncount\n/exit",
                    "3\n4\n5\n5\n10\nBye!"
                ),
                /* Check expressions with variables */
                new SimpleTestCase(
                    "a = 3\nb = 4\nc = 5\na + b - c\nb - c + 4 - a\na = 800\na + b + c\n/exit",
                    "2\n0\n809\nBye!"
                ),
                /* Check reassignment */
                new SimpleTestCase(
                    "a = 1\na = 2\na = 3\na\n/exit",
                    "3\nBye!"
                ),
                /* Check handling unknown variables */
                new SimpleTestCase(
                    "q\nr\nq = 10\nr = 20\nq\nr\nR\n/exit",
                    "Unknown variable\n" +
                        "Unknown variable\n" +
                        "10\n20\n" +
                        "Unknown variable\n" +
                        "Bye!"
                ),
                /* Check handling incorrect assignments */
                new SimpleTestCase(
                    "a1 = 8\nn = a2a\na = 7 = 8\nnum = 10\n/exit",
                    "Invalid identifier\n" +
                        "Invalid assignment\n" +
                        "Invalid assignment\n" +
                        "Bye!"
                )
            );
        }
    }
  learner_created: false
- name: src/calculator/Main.kt
  visible: true
  text: |-
    package calculator

    import java.lang.NumberFormatException
    import java.util.*

    fun main() {
        SmartCalculator().start()
    }

    class SmartCalculator {

        fun start() {
            var exit = false
            val scanner = Scanner(System.`in`)
            while (!exit) {
                when (val line = scanner.nextLine()) {
                    "/exit" -> exit = true
                    "/help" -> println("The program calculates the sum of numbers")
                    else -> {
                        if (line.startsWith("/")) {
                            println("Unknown command")
                        } else if (line.isNotEmpty()) {
                            try {
                                calculate(line.split(" ").filter { it.isNotEmpty() })
                            } catch (e: NumberFormatException) {
                                println("Invalid expression")
                            }
                        }
                    }
                }
            }
            println("Bye!")
        }

        private fun calculate(split: List<String>) {
            var left: Int? = null
            var right: Int? = null
            var operator: String? = null
            for (element in split) {
                if (left == null) {
                    left = element.toInt()
                } else if (operator == null) {
                    if (!"[+-]+".toRegex().matches(element)) {
                        throw NumberFormatException("Not a valid operator")
                    }
                    operator = element
                } else if (right == null) {
                    right = element.toInt()
                    left = calculate(left, right, operator)
                    operator = null
                    right = null
                }
            }
            println(left)
        }

        private fun calculate(left: Int, right: Int, operator: String): Int =
                when (operator) {
                    "+" -> left + right
                    "-" -> left - right
                    else -> {
                        if (operator.contains("+") || operator.count { it == '-' } % 2 == 0) {
                            left + right
                        } else {
                            left - right
                        }
                    }
                }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/491/implement
status: Solved
record: 6
